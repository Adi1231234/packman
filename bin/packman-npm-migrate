#!/usr/bin/env node

const program = require('commander');

const { initializeCommand } = require('../lib/core/initializer');
initializeCommand(program, 'migrate');

const commands = require('../lib/npm/migrate/commands');

program
    .command('package <name> [version]')
    .description('migrate packages from one registry to another')
    .option('--directory [directory]', 'the local directory in which to store the downloaded packages')
    .option('-s, --source <sourceRegistry>', 'the source registry from which to migrate packages (mandatory)')
    .option('-t, --target <targetRegistry>', 'the target registry the packages will be migrated, defaults to current registry')
    .action((name, version, command) => commands.migratePackageCommand(name, version, command));

program
    .command('package-lock <uri>')
    .description('migrate packages specified in a package-lock.json file to the target registry')
    .option('--directory [directory]')
    .option('-t, --target <targetRegistry>', 'the target registry the packages will be migrated, defaults to current registry')
    .action((uri, command) => commands.migratePackageLockCommand(uri, command));

program
    .command('package-json <uri>')
    .description('migrate packages specified in a package.json file to the target registry')
    .option('--directory [directory]')
    .option('--devDependencies')
    .option('--peerDependencies')
    .option('-s, --source <sourceRegistry>', 'the source registry from which to migrate packages (mandatory)')
    .option('-t, --target <targetRegistry>', 'the target registry the packages will be migrated, defaults to current registry')
    .action((uri, command) => commands.migratePackageJsonCommand(uri, command));

program
    .command('search <keyword>')
    .description('migrate packages returned by an npm registry search to the target registry')
    .option('--directory [directory]')
    .option('--devDependencies')
    .option('--peerDependencies')
    .option('-s, --source <sourceRegistry>', 'the source registry from which to migrate packages (mandatory)')
    .option('-t, --target <targetRegistry>', 'the target registry the packages will be migrated, defaults to current registry')
    .action((keyword, command) => commands.migrateSearchCommand(keyword, command));

program
    .command('all')
    .description('migrate packages returned by the /-/all endpoint to the target registry')
    .option('--directory [directory]')
    .option('-s, --source <sourceRegistry>', 'the source registry from which to migrate packages (mandatory)')
    .option('-t, --target <targetRegistry>', 'the target registry the packages will be migrated, defaults to current registry')
    .action((command) => commands.migrateAllCommand(command));

program.parse(process.argv);
